import com.android.build.api.variant.BuildConfigField
import java.util.regex.*

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.2.2'
    }
}

apply plugin: 'com.android.library'

android {
    namespace 'com.selligent'
    compileSdk 34

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
    }

    buildFeatures {
        buildConfig true
    }
}

androidComponents {
    onVariants(selector(), { variant ->
        def selligentSettings = loadSelligentSettings(variant)

        if (selligentSettings != null) {
            try {
                variant.buildConfigFields.put("SELLIGENT_SETTINGS", new BuildConfigField("String", "\"" + selligentSettings + "\"", "Selligent settings"))
            }
            catch (Exception ignored) {
                throw new Exception("Selligent requires Android Gradle plugin version 8.1.0 or higher.")
            }
        }
    })
}

repositories {
    mavenCentral()
    maven {
        url "$projectDir/../node_modules/react-native/android"
    }
    google()
}

dependencies {
    api ('com.facebook.react:react-native:+') {
        exclude group:'com.facebook.fbjni'
        exclude group:'com.facebook.yoga'
    }
    implementation 'com.selligent.sdk:selligent_mobile_sdk:4.5.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.google.firebase:firebase-messaging:23.4.1'
    implementation 'androidx.work:work-runtime:2.9.0'
    implementation 'androidx.concurrent:concurrent-futures:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    implementation 'com.selligent.sdk:selligent_mobile_reactnative_sdk:3.8.1'
}

def loadSelligentSettings(variant) {
    def currentFlavor = getCurrentFlavor()
    def defaultFileName = "selligent.json"
    def variantFileName = "selligent.${variant.getName()}.json"
    def resultingSettings = null

    File variantFile = getFile(variantFileName)
    File defaultFile = getFile(defaultFileName)
    File flavorFile = getFile("$currentFlavor/$defaultFileName")

    if (variantFile.exists()) {
        println("Reading Marigold Engage properties for variant ${variant.getName()} from $variantFile.path")
        resultingSettings = ""

        variantFile.eachLine { String line ->
            resultingSettings += line.replace("\"", "\\\"").replaceAll("\\s", "")
        }
    }
    else if (currentFlavor != "" && flavorFile.exists()) {
        println("Reading Marigold Engage properties for flavor $currentFlavor using $flavorFile.path")
        resultingSettings = ""

        flavorFile.eachLine { String line ->
            resultingSettings += line.replace("\"", "\\\"").replaceAll("\\s", "")
        }
    }
    else if (defaultFile.exists()) {
        println("Reading default Marigold Engage properties from ${defaultFile.path} (no variant specific nor flavor $defaultFileName were found)")
        resultingSettings = ""

        defaultFile.eachLine { String line ->
            resultingSettings += line.replace("\"", "\\\"").replaceAll("\\s", "")
        }
    }
    else {
        println("WARNING: No selligent.json file could be found for the given task. Disregard this message if the executing task is not building/executing the app.")
    }

    return resultingSettings
}

def getFile(filePath) {
    File defaultFile = new File("$project.rootDir/../$filePath")
    File unifiedLocationFile = new File("$project.rootDir/../selligent/$filePath")

    if (defaultFile.exists()) {
        println("selligent.json found in the root of the project")
        return defaultFile
    }
    else if (unifiedLocationFile.exists()) {
        println("selligent.json found in the unified `selligent` folder")   
    }
    
    return unifiedLocationFile
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    Pattern pattern = Pattern.compile("(install|assemble|bundle)(\\w+)(Release|Debug)")
    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find()) {
        return matcher.group(2).toLowerCase()
    }
    else {
        return ""
    }
}